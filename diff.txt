diff --git a/broker/dependency-reduced-pom.xml b/broker/dependency-reduced-pom.xml
index 447eb50..98e6d57 100644
--- a/broker/dependency-reduced-pom.xml
+++ b/broker/dependency-reduced-pom.xml
@@ -57,6 +57,13 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>${maven.compiler.release}</source>
+          <target>${maven.compiler.release}</target>
+        </configuration>
+      </plugin>
     </plugins>
   </build>
 </project>
diff --git a/broker/pom.xml b/broker/pom.xml
index cdf3281..caa0140 100644
--- a/broker/pom.xml
+++ b/broker/pom.xml
@@ -97,6 +97,14 @@
                     </execution>
                 </executions>
             </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>${maven.compiler.release}</source>
+                    <target>${maven.compiler.release}</target>
+                </configuration>
+            </plugin>
         </plugins>
     </build>
 </project>
\ No newline at end of file
diff --git a/client/dependency-reduced-pom.xml b/client/dependency-reduced-pom.xml
index ebf208b..990232a 100644
--- a/client/dependency-reduced-pom.xml
+++ b/client/dependency-reduced-pom.xml
@@ -57,6 +57,13 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>${maven.compiler.release}</source>
+          <target>${maven.compiler.release}</target>
+        </configuration>
+      </plugin>
     </plugins>
   </build>
 </project>
diff --git a/client/pom.xml b/client/pom.xml
index d08e40f..9d867b3 100644
--- a/client/pom.xml
+++ b/client/pom.xml
@@ -88,6 +88,14 @@
                     </execution>
                 </executions>
             </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>${maven.compiler.release}</source>
+                    <target>${maven.compiler.release}</target>
+                </configuration>
+            </plugin>
         </plugins>
     </build>
 </project>
\ No newline at end of file
diff --git a/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java b/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
index 791b08d..5ad311c 100644
--- a/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
+++ b/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
@@ -7,6 +7,7 @@ import javax.jms.*;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.lang.IllegalStateException;
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.util.Arrays;
@@ -79,79 +80,76 @@ public class JmsBrokerClient {
         if (message instanceof ObjectMessage) {
             ObjectMessage objReply = (ObjectMessage) message;
             Object responseData = objReply.getObject();
-            if (responseData instanceof ListMessage) {
-                ListMessage listResponse = (ListMessage) responseData;
-                listResponse.getStocks().forEach(stock -> {
-                    logger.log(Level.INFO, "Stock: " + stock.toString());
-                });
-            }
-            else if (responseData instanceof InfoMessage) {
-                InfoMessage infoResponse = (InfoMessage) responseData;
-                logger.log(Level.INFO, "Stock: " + infoResponse.getInfo().getName() + ", max. Amount: " + infoResponse.getInfo().getMaxStockCount());
-            }
-            else if (responseData instanceof ProfileMessage) {
-                ProfileMessage profileResponse = (ProfileMessage) responseData;
-                logger.log(Level.INFO, "Client Name: " + profileResponse.getClientName());
-                logger.log(Level.INFO, "Funds: " + profileResponse.getFunds().setScale(2, RoundingMode.DOWN));
-                logger.log(Level.INFO, "Owns stocks:");
-                List<Stock> stocks = profileResponse.getStocks();
-                if (!stocks.isEmpty()) {
-                    stocks.forEach(stock -> {
-                        logger.log(Level.INFO, "-- Stock: " + stock.getName() + ", Amount: " + stock.getMaxStockCount());
+            switch (responseData) {
+                case ListMessage listResponse -> {
+                    listResponse.getStocks().forEach(stock -> {
+                        logger.log(Level.INFO, "Stock: " + stock.toString());
                     });
-                } else {
-                    logger.log(Level.INFO, "-- None --");
                 }
-            } else if (responseData instanceof TransactionConfirmationMessage) {
-                TransactionConfirmationMessage transactionConfirmationResponse = (TransactionConfirmationMessage) responseData;
-                logger.log(Level.INFO,transactionConfirmationResponse.getMessage());
-
-            } else if (responseData instanceof TransactionRefusalMessage) {
-                TransactionRefusalMessage transactionRefusalResponse = (TransactionRefusalMessage) responseData;
-                logger.log(Level.INFO,transactionRefusalResponse.getMessage());
-            }
-
-            //receive Topic-> (un)subscribe to it
-            if(responseData instanceof TopicMessage) {
-                Topic topic = ((TopicMessage) responseData).getTopic();
-                String topicName = topic.getTopicName();
-                boolean isSetSubscribing = ((TopicMessage) responseData).isSetSubscribing();
-
-                if(isSetSubscribing) {
-                    if(!topicConsumer.containsKey(topicName)) {
-                        logger.log(Level.INFO, "Subscribing to " + topicName);
-                        //create new consumer for each topic.
-                        //MessageListener required for these consumer, so we have this function block from 100-109. Limited to only text messages
-                        MessageConsumer consumer = session.createConsumer(topic);
-                        consumer.setMessageListener(topicMessage -> {
-                            if (topicMessage instanceof TextMessage) {
-                                TextMessage textMessage = (TextMessage) topicMessage;
-                                try {
-                                    logger.log(Level.INFO, textMessage.getText());
-                                } catch (JMSException e) {
-                                    logger.log(Level.SEVERE, "Error processing TextMessage", e);
-                                }
-                            } else {
-                                logger.log(Level.SEVERE, "Topic Message is limited to text only. Actual type: " + topicMessage.toString());
-                            }
+                case InfoMessage infoResponse -> {
+                    logger.log(Level.INFO, "Stock: " + infoResponse.getInfo().getName() +
+                            ", max. Amount: " + infoResponse.getInfo().getMaxStockCount());
+                }
+                case ProfileMessage profileResponse -> {
+                    logger.log(Level.INFO, "Client Name: " + profileResponse.getClientName());
+                    logger.log(Level.INFO, "Funds: " + profileResponse.getFunds().setScale(2, RoundingMode.DOWN));
+                    logger.log(Level.INFO, "Owns stocks:");
+                    List<Stock> stocks = profileResponse.getStocks();
+                    if (!stocks.isEmpty()) {
+                        stocks.forEach(stock -> {
+                            logger.log(Level.INFO, "-- Stock: " + stock.getName() + ", Amount: " + stock.getMaxStockCount());
                         });
-                        topicConsumer.put(topicName, consumer);
-                        logger.log(Level.FINE, "Subscribed to topic: " + topicName);
                     } else {
-                        logger.log(Level.INFO, "Already subscribed to " + topicName);
+                        logger.log(Level.INFO, "-- None --");
                     }
-                } else {
-                    if(topicConsumer.containsKey(topicName)) {
-                        logger.log(Level.INFO, "Unsubscribing to " + topicName);
-                        topicConsumer.get(topicName).close();
-                        topicConsumer.remove(topicName);
-                        logger.log(Level.INFO, "Unsubscribed from topic: " + topicName);
-                    } else{
-                        logger.log(Level.INFO, "Client not subscribed to " + topicName);
+                }
+                case TransactionConfirmationMessage transactionConfirmationResponse -> {
+                    logger.log(Level.INFO,transactionConfirmationResponse.getMessage());
+                }
+                case TransactionRefusalMessage transactionRefusalResponse -> {
+                    logger.log(Level.INFO,transactionRefusalResponse.getMessage());
+                }
+                case TopicMessage topic -> {
+                    String topicName = topic.getTopic().getTopicName();
+                    boolean isSetSubscribing = ((TopicMessage) responseData).isSetSubscribing();
+
+                    if(isSetSubscribing) {
+                        if(!topicConsumer.containsKey(topicName)) {
+                            logger.log(Level.INFO, "Subscribing to " + topicName);
+                            //create new consumer for each topic.
+                            //MessageListener required for these consumer, so we have this function block from 100-109. Limited to only text messages
+                            MessageConsumer consumer = session.createConsumer(topic.getTopic());
+                            consumer.setMessageListener(topicMessage -> {
+                                if (topicMessage instanceof TextMessage) {
+                                    TextMessage textMessage = (TextMessage) topicMessage;
+                                    try {
+                                        logger.log(Level.INFO, textMessage.getText());
+                                    } catch (JMSException e) {
+                                        logger.log(Level.SEVERE, "Error processing TextMessage", e);
+                                    }
+                                } else {
+                                    logger.log(Level.SEVERE, "Topic Message is limited to text only. Actual type: " + topicMessage.toString());
+                                }
+                            });
+                            topicConsumer.put(topicName, consumer);
+                            logger.log(Level.FINE, "Subscribed to topic: " + topicName);
+                        } else {
+                            logger.log(Level.INFO, "Already subscribed to " + topicName);
+                        }
+                    } else {
+                        if(topicConsumer.containsKey(topicName)) {
+                            logger.log(Level.INFO, "Unsubscribing to " + topicName);
+                            topicConsumer.get(topicName).close();
+                            topicConsumer.remove(topicName);
+                            logger.log(Level.INFO, "Unsubscribed from topic: " + topicName);
+                        } else{
+                            logger.log(Level.INFO, "Client not subscribed to " + topicName);
+                        }
                     }
                 }
-            }
 
+                default -> throw new IllegalStateException("Unexpected value: " + responseData);
+            }
 
         } else if (message instanceof TextMessage) {
             TextMessage textMessage = (TextMessage) message;
diff --git a/common/src/main/java/de/tu_berlin/cit/vs/jms/common/Stock.java b/common/src/main/java/de/tu_berlin/cit/vs/jms/common/Stock.java
index 4a484df..e4aa012 100644
--- a/common/src/main/java/de/tu_berlin/cit/vs/jms/common/Stock.java
+++ b/common/src/main/java/de/tu_berlin/cit/vs/jms/common/Stock.java
@@ -2,6 +2,7 @@ package de.tu_berlin.cit.vs.jms.common;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
+import java.math.RoundingMode;
 
 
 public class Stock implements Serializable {
@@ -58,7 +59,7 @@ public class Stock implements Serializable {
     @Override
     public String toString() {
         return "" + getName() +
-                " -- price: " + getPrice() +
+                " -- price: " + getPrice().setScale(2, RoundingMode.DOWN) +
                 " -- available: " + getAvailableCount() +
                 " -- sum: " + getMaxStockCount();
     }
diff --git a/pom.xml b/pom.xml
index 9ac281b..d5b5ae6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -16,12 +16,27 @@
     </modules>
 
     <properties>
-        <maven.compiler.release>11</maven.compiler.release>
+        <maven.compiler.release>21</maven.compiler.release>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <jms.version>2.0.1</jms.version>
         <activemq.version>5.19.0</activemq.version>
     </properties>
 
+    <build>
+        <pluginManagement>
+            <plugins>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-compiler-plugin</artifactId>
+                    <version>3.11.0</version>
+                    <configuration>
+                        <release>${maven.compiler.release}</release>
+                    </configuration>
+                </plugin>
+            </plugins>
+        </pluginManagement>
+    </build>
+
     <dependencyManagement>
         <dependencies>
             <dependency>
