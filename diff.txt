diff --git a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/Client.java b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/Client.java
index a268b7f..ac2d5c0 100644
--- a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/Client.java
+++ b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/Client.java
@@ -106,17 +106,25 @@ public class Client {
                             logger.log(Level.FINE, "Buy stock request received from : " + client.getClientName());
 
                             if (brokerMessage instanceof BuyMessage) {
-                                String buyConfirmationPayload;
+                                ObjectMessage transactionOM;
                                 try {
-                                    Stock boughtStock = broker.buyStock(this, ((BuyMessage) brokerMessage).getStockName(),
+                                    Stock boughtStock = broker.buyStock(
+                                            this, ((BuyMessage) brokerMessage).getStockName(),
                                             ((BuyMessage) brokerMessage).getAmount());
                                     addStock(boughtStock.getName(), boughtStock.getMaxStockCount(), boughtStock.getPrice());
-                                    buyConfirmationPayload = "Confirmation: " + boughtStock.getMaxStockCount() +
+                                    String buyConfirmationPayload = "Confirmation: " + boughtStock.getMaxStockCount() +
                                             " stocks of " + boughtStock.getName() + " bought. Price: " + boughtStock.getPrice();
-                                    } catch (Exception e) {
-                                    buyConfirmationPayload = "error: " + e.getMessage();
+                                    TransactionConfirmationMessage transactionConfirmationMessage =
+                                            new TransactionConfirmationMessage(buyConfirmationPayload);
+                                    transactionOM = session.createObjectMessage(transactionConfirmationMessage);
+                                } catch (Exception e) {
+                                    String refusalPayload = "Transaction Refusal: " + e.getMessage();
+                                    TransactionRefusalMessage transactionRefusalMessage =
+                                            new TransactionRefusalMessage(refusalPayload);
+                                    transactionOM = session.createObjectMessage(transactionRefusalMessage);
                                 }
-                                    producer.send(session.createTextMessage(buyConfirmationPayload));
+
+                                    producer.send(transactionOM);
                             }
 
                             break;
@@ -125,18 +133,23 @@ public class Client {
                             if (brokerMessage instanceof SellMessage) {
                                 String stockNameForSell = ((SellMessage) brokerMessage).getStockName();
                                 Integer amount = ((SellMessage) brokerMessage).getAmount();
+                                ObjectMessage transactionOM;
                                 try {
                                     logger.log(Level.FINE, "Sending Sell Confirmation for : " + client.getClientName());
                                     broker.sellStock(this, stockNameForSell, amount);
                                     String sellConfirmationPayload = "Confirmation: " + amount + " stocks of "
                                         + stockNameForSell + " sold. Price: TODO " ; // TODO: retrieve proper price
-                                    producer.send(session.createTextMessage(sellConfirmationPayload));
+                                    TransactionConfirmationMessage transactionConfirmationMessage =
+                                            new TransactionConfirmationMessage(sellConfirmationPayload);
+                                    transactionOM = session.createObjectMessage(transactionConfirmationMessage);
                                 } catch (JMSException e) {
                                     logger.log(Level.FINE, "Sending Sell Refusal for : " + client.getClientName());
-                                    String sellRefusalPayload = "Refusal: " + e.getMessage();
-                                    producer.send(session.createTextMessage(sellRefusalPayload));
-                                    throw e;
+                                    String sellRefusalPayload = "Transaction Refusal: " + e.getMessage();
+                                    TransactionRefusalMessage transactionRefusalMessage =
+                                            new TransactionRefusalMessage(sellRefusalPayload);
+                                    transactionOM = session.createObjectMessage(transactionRefusalMessage);
                                 }
+                                producer.send(transactionOM);
                             }
 
                             break;
diff --git a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/SimpleBroker.java b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/SimpleBroker.java
index 2357dfb..8d93136 100644
--- a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/SimpleBroker.java
+++ b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/SimpleBroker.java
@@ -26,6 +26,7 @@ public class SimpleBroker {
 
     public SimpleBroker(StockExchange stockExchange) throws JMSException {
         this.stockExchange = stockExchange;
+        this.stockExchange.registerBroker(this);
         ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
         conFactory.setTrustedPackages(Arrays.asList(
                 "de.tu_berlin.cit.vs.jms.common",
@@ -76,16 +77,17 @@ public class SimpleBroker {
     }
 
     private void updateStockTopic(Stock stock, StockEvent stockEvent) throws JMSException {
+        if (this.session == null) return;
         String payload = "";
         switch(stockEvent) {
             case STOCK_PRICE_CHANGED:
                 payload = "Price Update for " + stock.getName() + ". Current price: " + stock.getPrice();
                 break;
             case STOCK_SOLD:
-                payload = stock.getName() + " stock has been sold by a client. Available: "  + stock.getAvailableCount();
+                payload = stock.getAvailableCount() + stock.getName() + " stock has been sold by a client.";
                 break;
             case STOCK_BOUGHT:
-                payload = stock.getName() + " stock is bought by a client. Available: "  + stock.getAvailableCount();
+                payload = stock.getAvailableCount() + stock.getName() + " stock is bought by a client.";
                 break;
             default:
                 break;
@@ -100,6 +102,7 @@ public class SimpleBroker {
 
 
     private void updateStockTopic(String stockName, StockEvent stockEvent) throws JMSException {
+        if (this.session == null) return;
         String payload = "";
         switch(stockEvent) {
             case STOCK_PRICE_CHANGED:
@@ -117,7 +120,7 @@ public class SimpleBroker {
                 break;
         }
         if (!payload.isEmpty()) {
-            Message message = session.createTextMessage(payload);
+            Message message = this.session.createTextMessage(payload);
             if (topicProducers.containsKey(stockName)) {
                 topicProducers.get(stockName).send(message);
             }
@@ -265,5 +268,20 @@ public class SimpleBroker {
         return this.stockExchange.getStockMap();
     }
 
+    public void notifyPriceUpdate() throws JMSException {
+        stockExchange.getStockMap().forEach((stockName, stock) -> {
+                    try {
+                        if (stock.getPrice() != null) {
+                            updateStockTopic(stock, StockEvent.STOCK_PRICE_CHANGED);
+                        }
+
+                    } catch (JMSException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+
+        );
+    }
+
 
 }
diff --git a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/StockExchange.java b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/StockExchange.java
index 2b878e0..642279b 100644
--- a/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/StockExchange.java
+++ b/broker/src/main/java/de/tu_berlin/cit/vs/jms/broker/StockExchange.java
@@ -3,6 +3,8 @@ package de.tu_berlin.cit.vs.jms.broker;
 import de.tu_berlin.cit.vs.jms.common.LoggingUtils;
 import de.tu_berlin.cit.vs.jms.common.Stock;
 import org.apache.commons.csv.*;
+
+import javax.jms.JMSException;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
@@ -17,6 +19,7 @@ public class StockExchange {
     private static final Logger logger = LoggingUtils.getLogger(StockExchange.class);
     private Map<String, Stock> stockMap;
     private List<String> stockSymbols = new ArrayList<>();
+    private List<SimpleBroker> brokers = new ArrayList<>();
     public StockExchange(Map<String, Stock> stockMap, String filePath) {
         this(stockMap, filePath, Optional.of(5000));
     }
@@ -68,7 +71,8 @@ public class StockExchange {
 
             for (CSVRecord record : parser) {
                 processStockRecord(record);
-                Thread.sleep(sleepMillis.orElse(5000));
+                notifyBrokers();
+                Thread.sleep(sleepMillis.orElse(10000)); // update price every 10 seconds
             }
 
 
@@ -80,5 +84,26 @@ public class StockExchange {
         }
     }
 
+    private void notifyBrokers() {
+
+        this.brokers.forEach(SimpleBroker -> {
+            try {
+                SimpleBroker.notifyPriceUpdate();
+            } catch (JMSException e) {
+                throw new RuntimeException(e);
+            }
+        });
+
+    }
+    public void registerBroker(SimpleBroker broker) {
+        brokers.add(broker);
+    }
+
+    public List<SimpleBroker> getBrokers() {
+        return brokers;
+    }
 
+    public void unregisterBroker(SimpleBroker broker) {
+        brokers.remove(broker);
+    }
 }
diff --git a/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java b/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
index 02cafc7..fecb54c 100644
--- a/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
+++ b/client/src/main/java/de/tu_berlin/cit/vs/jms/client/JmsBrokerClient.java
@@ -101,6 +101,13 @@ public class JmsBrokerClient {
                 } else {
                     logger.log(Level.INFO, "-- None --");
                 }
+            } else if (responseData instanceof TransactionConfirmationMessage) {
+                TransactionConfirmationMessage transactionConfirmationResponse = (TransactionConfirmationMessage) responseData;
+                logger.log(Level.INFO,transactionConfirmationResponse.getMessage());
+
+            } else if (responseData instanceof TransactionRefusalMessage) {
+                TransactionRefusalMessage transactionRefusalResponse = (TransactionRefusalMessage) responseData;
+                logger.log(Level.INFO,transactionRefusalResponse.getMessage());
             }
 
             //receive Topic-> (un)subscribe to it
@@ -169,7 +176,7 @@ public class JmsBrokerClient {
                             }
                         });
                         topicConsumer.put(topicName, consumer);
-                        logger.log(Level.FINE, "Subscribed to topic: " + topicName);
+                        logger.log(Level.INFO, "Subscribed to topic: " + topicName);
                     } else {
                         logger.log(Level.INFO, "Already subscribed to " + topicName);
                     }
@@ -272,6 +279,10 @@ public class JmsBrokerClient {
     }
 
     public void quit() throws JMSException {
+        UnregisterMessage unregisterMessage = new UnregisterMessage(clientName);
+        ObjectMessage request = session.createObjectMessage(unregisterMessage);
+        messageProducer.send(request);
+
         // Close consumers and producers first
         if (messageConsumer != null) messageConsumer.close();
         if (messageProducer != null) messageProducer.close();
@@ -286,9 +297,7 @@ public class JmsBrokerClient {
 
         logger.log(Level.INFO, "Client disconnected. Queues remain on broker.");
 
-        UnregisterMessage unregisterMessage = new UnregisterMessage(clientName);
-        ObjectMessage request = session.createObjectMessage(unregisterMessage);
-        messageProducer.send(request);
+
     }
 
     /**
diff --git a/common/src/main/java/de/tu_berlin/cit/vs/jms/common/BrokerMessage.java b/common/src/main/java/de/tu_berlin/cit/vs/jms/common/BrokerMessage.java
index 06a7598..1c4e95f 100644
--- a/common/src/main/java/de/tu_berlin/cit/vs/jms/common/BrokerMessage.java
+++ b/common/src/main/java/de/tu_berlin/cit/vs/jms/common/BrokerMessage.java
@@ -26,6 +26,8 @@ public abstract class BrokerMessage implements Serializable {
         TOPIC,
         STOCK_SELL,
         STOCK_INFO,
-        STOCK_PROFILE
+        STOCK_PROFILE,
+        TRANSACTION_CONFIRMATION,
+        TRANSACTION_REFUSAL
     }
 }
